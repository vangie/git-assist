#!/usr/bin/expect -f

# Load common utilities and test functions
source [file join [file dirname [info script]] "../../lib/common.tcl"]
source [file join [file dirname [info script]] "../../lib/test_functions.tcl"]

# Get repo path from command line
if {[llength $argv] < 1} {
    puts "Usage: $argv0 <repo-path>"
    exit 1
}

# Setup paths and change to the repository directory
set paths [setup_paths [lindex $argv 0]]
cd [dict get $paths repo_path]
set bin_path [dict get $paths bin_path]
set repo_name [dict get $paths repo_name]

puts "\n==== Testing in $repo_name repository ===="

# Test branch name editing
spawn $bin_path
set timeout 20

expect {
    -exact "Changes to be committed:" {
        test_pass "Listed staged files"
        exp_continue
    }
    -re "Generated branch name:.*\r\n\r\n.*\r\n" {
        test_pass "Generated branch name"
        exp_continue
    }
    -exact "Use this branch name? (Y/n/\[e\]dit/\[r\]egenerate): " {
        exp_send "e\r"
        test_pass "Chose to edit branch name"
        exp_continue
    }
    -re "Branch name: .*" {
        exp_send "test/custom-branch\r"
        test_pass "Entered custom branch name"
        exp_continue
    }
    -re "Generated commit message:.*\r\n\r\n.*\r\n" {
        test_pass "Generated commit message"
        exp_continue
    }
    -exact "Use this message? (Y/n/\[e\]dit/\[r\]egenerate): " {
        exp_send "y\r"
        test_pass "Accepted commit message"
        exp_continue
    }
    -exact "Changes committed successfully!" {
        test_pass "Commit completed successfully"
        exp_continue
    }
    -exact "Warning: No 'origin' remote found. Branch created but not pushed." {
        test_pass "Handled missing origin"
        return
    }
    -exact "Push branch to origin? (Y/n): " {
        exp_send "y\r"
        test_pass "Accepted push"
        exp_continue
    }
    -re "Branch pushed successfully!" {
        test_pass "Branch pushed successfully"
        return
    }
    timeout {
        test_fail "Timeout waiting for prompt"
    }
    eof {
        test_fail "Unexpected end of output"
    }
}

puts "\n==== All tests for '$repo_name' scenario completed successfully! ====\n" 